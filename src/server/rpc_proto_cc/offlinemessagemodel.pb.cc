// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offlinemessagemodel.proto

#include "offlinemessagemodel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace offlinemsgservice {
PROTOBUF_CONSTEXPR InsertRequest::InsertRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertRequestDefaultTypeInternal() {}
  union {
    InsertRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertRequestDefaultTypeInternal _InsertRequest_default_instance_;
PROTOBUF_CONSTEXPR InsertResponse::InsertResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertResponseDefaultTypeInternal() {}
  union {
    InsertResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertResponseDefaultTypeInternal _InsertResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveRequest::RemoveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveRequestDefaultTypeInternal() {}
  union {
    RemoveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveRequestDefaultTypeInternal _RemoveRequest_default_instance_;
PROTOBUF_CONSTEXPR RemoveResponse::RemoveResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveResponseDefaultTypeInternal() {}
  union {
    RemoveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveResponseDefaultTypeInternal _RemoveResponse_default_instance_;
PROTOBUF_CONSTEXPR QueryRequest::QueryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryRequestDefaultTypeInternal() {}
  union {
    QueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
PROTOBUF_CONSTEXPR QueryResponse::QueryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryResponseDefaultTypeInternal() {}
  union {
    QueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
}  // namespace offlinemsgservice
static ::_pb::Metadata file_level_metadata_offlinemessagemodel_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_offlinemessagemodel_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_offlinemessagemodel_2eproto[1];

const uint32_t TableStruct_offlinemessagemodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::InsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::InsertRequest, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::InsertRequest, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::InsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::InsertResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::InsertResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::RemoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::RemoveRequest, _impl_.userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::RemoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::RemoveResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::RemoveResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::QueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::QueryRequest, _impl_.userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::QueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::offlinemsgservice::QueryResponse, _impl_.messages_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::offlinemsgservice::InsertRequest)},
  { 8, -1, -1, sizeof(::offlinemsgservice::InsertResponse)},
  { 16, -1, -1, sizeof(::offlinemsgservice::RemoveRequest)},
  { 23, -1, -1, sizeof(::offlinemsgservice::RemoveResponse)},
  { 31, -1, -1, sizeof(::offlinemsgservice::QueryRequest)},
  { 38, -1, -1, sizeof(::offlinemsgservice::QueryResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::offlinemsgservice::_InsertRequest_default_instance_._instance,
  &::offlinemsgservice::_InsertResponse_default_instance_._instance,
  &::offlinemsgservice::_RemoveRequest_default_instance_._instance,
  &::offlinemsgservice::_RemoveResponse_default_instance_._instance,
  &::offlinemsgservice::_QueryRequest_default_instance_._instance,
  &::offlinemsgservice::_QueryResponse_default_instance_._instance,
};

const char descriptor_table_protodef_offlinemessagemodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031offlinemessagemodel.proto\022\021offlinemsgs"
  "ervice\"0\n\rInsertRequest\022\016\n\006userid\030\001 \001(\005\022"
  "\017\n\007message\030\002 \001(\t\"2\n\016InsertResponse\022\017\n\007su"
  "ccess\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"\037\n\rRemoveRe"
  "quest\022\016\n\006userid\030\001 \001(\005\"2\n\016RemoveResponse\022"
  "\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"\036\n\014Que"
  "ryRequest\022\016\n\006userid\030\001 \001(\005\"!\n\rQueryRespon"
  "se\022\020\n\010messages\030\001 \003(\t2\201\002\n\025OfflineMessageS"
  "ervice\022M\n\006Insert\022 .offlinemsgservice.Ins"
  "ertRequest\032!.offlinemsgservice.InsertRes"
  "ponse\022M\n\006Remove\022 .offlinemsgservice.Remo"
  "veRequest\032!.offlinemsgservice.RemoveResp"
  "onse\022J\n\005Query\022\037.offlinemsgservice.QueryR"
  "equest\032 .offlinemsgservice.QueryResponse"
  "B\003\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_offlinemessagemodel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_offlinemessagemodel_2eproto = {
    false, false, 573, descriptor_table_protodef_offlinemessagemodel_2eproto,
    "offlinemessagemodel.proto",
    &descriptor_table_offlinemessagemodel_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_offlinemessagemodel_2eproto::offsets,
    file_level_metadata_offlinemessagemodel_2eproto, file_level_enum_descriptors_offlinemessagemodel_2eproto,
    file_level_service_descriptors_offlinemessagemodel_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_offlinemessagemodel_2eproto_getter() {
  return &descriptor_table_offlinemessagemodel_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_offlinemessagemodel_2eproto(&descriptor_table_offlinemessagemodel_2eproto);
namespace offlinemsgservice {

// ===================================================================

class InsertRequest::_Internal {
 public:
};

InsertRequest::InsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:offlinemsgservice.InsertRequest)
}
InsertRequest::InsertRequest(const InsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.userid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.userid_ = from._impl_.userid_;
  // @@protoc_insertion_point(copy_constructor:offlinemsgservice.InsertRequest)
}

inline void InsertRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.userid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertRequest::~InsertRequest() {
  // @@protoc_insertion_point(destructor:offlinemsgservice.InsertRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void InsertRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:offlinemsgservice.InsertRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.userid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "offlinemsgservice.InsertRequest.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:offlinemsgservice.InsertRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "offlinemsgservice.InsertRequest.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:offlinemsgservice.InsertRequest)
  return target;
}

size_t InsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:offlinemsgservice.InsertRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 userid = 1;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertRequest::GetClassData() const { return &_class_data_; }


void InsertRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertRequest*>(&to_msg);
  auto& from = static_cast<const InsertRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:offlinemsgservice.InsertRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertRequest::CopyFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:offlinemsgservice.InsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRequest::IsInitialized() const {
  return true;
}

void InsertRequest::InternalSwap(InsertRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.userid_, other->_impl_.userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_offlinemessagemodel_2eproto_getter, &descriptor_table_offlinemessagemodel_2eproto_once,
      file_level_metadata_offlinemessagemodel_2eproto[0]);
}

// ===================================================================

class InsertResponse::_Internal {
 public:
};

InsertResponse::InsertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:offlinemsgservice.InsertResponse)
}
InsertResponse::InsertResponse(const InsertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:offlinemsgservice.InsertResponse)
}

inline void InsertResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertResponse::~InsertResponse() {
  // @@protoc_insertion_point(destructor:offlinemsgservice.InsertResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void InsertResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:offlinemsgservice.InsertResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "offlinemsgservice.InsertResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:offlinemsgservice.InsertResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "offlinemsgservice.InsertResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:offlinemsgservice.InsertResponse)
  return target;
}

size_t InsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:offlinemsgservice.InsertResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertResponse::GetClassData() const { return &_class_data_; }


void InsertResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertResponse*>(&to_msg);
  auto& from = static_cast<const InsertResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:offlinemsgservice.InsertResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertResponse::CopyFrom(const InsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:offlinemsgservice.InsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertResponse::IsInitialized() const {
  return true;
}

void InsertResponse::InternalSwap(InsertResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_offlinemessagemodel_2eproto_getter, &descriptor_table_offlinemessagemodel_2eproto_once,
      file_level_metadata_offlinemessagemodel_2eproto[1]);
}

// ===================================================================

class RemoveRequest::_Internal {
 public:
};

RemoveRequest::RemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:offlinemsgservice.RemoveRequest)
}
RemoveRequest::RemoveRequest(const RemoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.userid_ = from._impl_.userid_;
  // @@protoc_insertion_point(copy_constructor:offlinemsgservice.RemoveRequest)
}

inline void RemoveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoveRequest::~RemoveRequest() {
  // @@protoc_insertion_point(destructor:offlinemsgservice.RemoveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:offlinemsgservice.RemoveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:offlinemsgservice.RemoveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:offlinemsgservice.RemoveRequest)
  return target;
}

size_t RemoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:offlinemsgservice.RemoveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveRequest::GetClassData() const { return &_class_data_; }


void RemoveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveRequest*>(&to_msg);
  auto& from = static_cast<const RemoveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:offlinemsgservice.RemoveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveRequest::CopyFrom(const RemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:offlinemsgservice.RemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRequest::IsInitialized() const {
  return true;
}

void RemoveRequest::InternalSwap(RemoveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.userid_, other->_impl_.userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_offlinemessagemodel_2eproto_getter, &descriptor_table_offlinemessagemodel_2eproto_once,
      file_level_metadata_offlinemessagemodel_2eproto[2]);
}

// ===================================================================

class RemoveResponse::_Internal {
 public:
};

RemoveResponse::RemoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:offlinemsgservice.RemoveResponse)
}
RemoveResponse::RemoveResponse(const RemoveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:offlinemsgservice.RemoveResponse)
}

inline void RemoveResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoveResponse::~RemoveResponse() {
  // @@protoc_insertion_point(destructor:offlinemsgservice.RemoveResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void RemoveResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:offlinemsgservice.RemoveResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "offlinemsgservice.RemoveResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:offlinemsgservice.RemoveResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "offlinemsgservice.RemoveResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:offlinemsgservice.RemoveResponse)
  return target;
}

size_t RemoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:offlinemsgservice.RemoveResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveResponse::GetClassData() const { return &_class_data_; }


void RemoveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveResponse*>(&to_msg);
  auto& from = static_cast<const RemoveResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:offlinemsgservice.RemoveResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveResponse::CopyFrom(const RemoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:offlinemsgservice.RemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveResponse::IsInitialized() const {
  return true;
}

void RemoveResponse::InternalSwap(RemoveResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_offlinemessagemodel_2eproto_getter, &descriptor_table_offlinemessagemodel_2eproto_once,
      file_level_metadata_offlinemessagemodel_2eproto[3]);
}

// ===================================================================

class QueryRequest::_Internal {
 public:
};

QueryRequest::QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:offlinemsgservice.QueryRequest)
}
QueryRequest::QueryRequest(const QueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.userid_ = from._impl_.userid_;
  // @@protoc_insertion_point(copy_constructor:offlinemsgservice.QueryRequest)
}

inline void QueryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryRequest::~QueryRequest() {
  // @@protoc_insertion_point(destructor:offlinemsgservice.QueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:offlinemsgservice.QueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:offlinemsgservice.QueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:offlinemsgservice.QueryRequest)
  return target;
}

size_t QueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:offlinemsgservice.QueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryRequest::GetClassData() const { return &_class_data_; }


void QueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryRequest*>(&to_msg);
  auto& from = static_cast<const QueryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:offlinemsgservice.QueryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:offlinemsgservice.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const {
  return true;
}

void QueryRequest::InternalSwap(QueryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.userid_, other->_impl_.userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_offlinemessagemodel_2eproto_getter, &descriptor_table_offlinemessagemodel_2eproto_once,
      file_level_metadata_offlinemessagemodel_2eproto[4]);
}

// ===================================================================

class QueryResponse::_Internal {
 public:
};

QueryResponse::QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:offlinemsgservice.QueryResponse)
}
QueryResponse::QueryResponse(const QueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:offlinemsgservice.QueryResponse)
}

inline void QueryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryResponse::~QueryResponse() {
  // @@protoc_insertion_point(destructor:offlinemsgservice.QueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
}

void QueryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:offlinemsgservice.QueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_messages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "offlinemsgservice.QueryResponse.messages"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:offlinemsgservice.QueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string messages = 1;
  for (int i = 0, n = this->_internal_messages_size(); i < n; i++) {
    const auto& s = this->_internal_messages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "offlinemsgservice.QueryResponse.messages");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:offlinemsgservice.QueryResponse)
  return target;
}

size_t QueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:offlinemsgservice.QueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string messages = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.messages_.size());
  for (int i = 0, n = _impl_.messages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.messages_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryResponse::GetClassData() const { return &_class_data_; }


void QueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryResponse*>(&to_msg);
  auto& from = static_cast<const QueryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:offlinemsgservice.QueryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryResponse::CopyFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:offlinemsgservice.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponse::IsInitialized() const {
  return true;
}

void QueryResponse::InternalSwap(QueryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_offlinemessagemodel_2eproto_getter, &descriptor_table_offlinemessagemodel_2eproto_once,
      file_level_metadata_offlinemessagemodel_2eproto[5]);
}

// ===================================================================

OfflineMessageService::~OfflineMessageService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* OfflineMessageService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_offlinemessagemodel_2eproto);
  return file_level_service_descriptors_offlinemessagemodel_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* OfflineMessageService::GetDescriptor() {
  return descriptor();
}

void OfflineMessageService::Insert(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::offlinemsgservice::InsertRequest*,
                         ::offlinemsgservice::InsertResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Insert() not implemented.");
  done->Run();
}

void OfflineMessageService::Remove(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::offlinemsgservice::RemoveRequest*,
                         ::offlinemsgservice::RemoveResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Remove() not implemented.");
  done->Run();
}

void OfflineMessageService::Query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::offlinemsgservice::QueryRequest*,
                         ::offlinemsgservice::QueryResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Query() not implemented.");
  done->Run();
}

void OfflineMessageService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_offlinemessagemodel_2eproto[0]);
  switch(method->index()) {
    case 0:
      Insert(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::offlinemsgservice::InsertRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::offlinemsgservice::InsertResponse*>(
                 response),
             done);
      break;
    case 1:
      Remove(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::offlinemsgservice::RemoveRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::offlinemsgservice::RemoveResponse*>(
                 response),
             done);
      break;
    case 2:
      Query(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::offlinemsgservice::QueryRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::offlinemsgservice::QueryResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& OfflineMessageService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::offlinemsgservice::InsertRequest::default_instance();
    case 1:
      return ::offlinemsgservice::RemoveRequest::default_instance();
    case 2:
      return ::offlinemsgservice::QueryRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& OfflineMessageService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::offlinemsgservice::InsertResponse::default_instance();
    case 1:
      return ::offlinemsgservice::RemoveResponse::default_instance();
    case 2:
      return ::offlinemsgservice::QueryResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

OfflineMessageService_Stub::OfflineMessageService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
OfflineMessageService_Stub::OfflineMessageService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
OfflineMessageService_Stub::~OfflineMessageService_Stub() {
  if (owns_channel_) delete channel_;
}

void OfflineMessageService_Stub::Insert(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::offlinemsgservice::InsertRequest* request,
                              ::offlinemsgservice::InsertResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void OfflineMessageService_Stub::Remove(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::offlinemsgservice::RemoveRequest* request,
                              ::offlinemsgservice::RemoveResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void OfflineMessageService_Stub::Query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::offlinemsgservice::QueryRequest* request,
                              ::offlinemsgservice::QueryResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace offlinemsgservice
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::offlinemsgservice::InsertRequest*
Arena::CreateMaybeMessage< ::offlinemsgservice::InsertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::offlinemsgservice::InsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::offlinemsgservice::InsertResponse*
Arena::CreateMaybeMessage< ::offlinemsgservice::InsertResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::offlinemsgservice::InsertResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::offlinemsgservice::RemoveRequest*
Arena::CreateMaybeMessage< ::offlinemsgservice::RemoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::offlinemsgservice::RemoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::offlinemsgservice::RemoveResponse*
Arena::CreateMaybeMessage< ::offlinemsgservice::RemoveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::offlinemsgservice::RemoveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::offlinemsgservice::QueryRequest*
Arena::CreateMaybeMessage< ::offlinemsgservice::QueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::offlinemsgservice::QueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::offlinemsgservice::QueryResponse*
Arena::CreateMaybeMessage< ::offlinemsgservice::QueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::offlinemsgservice::QueryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
